# plot(cars)
qp <- qplot(mpg, wt, data=mtcars)
qp
print(qp + theme(plot.background = element_rect(fill="white")), vp=viewport(.8, .8, .2, .5))
library(ggplot2)
library(gridExtra)
library(grid)
# plot(cars)
qp <- qplot(mpg, wt, data=mtcars)
qp
print(qp + theme(plot.background = element_rect(fill="white")), vp=viewport(.8, .8, .4, .3))
library(ggplot2)
library(gridExtra)
library(grid)
# plot(cars)
qp <- qplot(mpg, wt, data=mtcars)
qp
print(qp + theme(plot.background = element_rect(fill="white")), vp=viewport(.8, .8, .4, .25))
library(ggplot2)
library(gridExtra)
library(grid)
# plot(cars)
qp <- qplot(mpg, wt, data=mtcars)
qp
print(qp + theme(plot.background = element_rect(fill="white")), vp=viewport(.8, .8, .3, .25))
library(ggplot2)
library(gridExtra)
library(grid)
# plot(cars)
qp <- qplot(mpg, wt, data=mtcars)
qp
print(qp + theme(plot.background = element_rect(fill="white")), vp=viewport(.8, .75, .3, .25))
library(ggplot2)
library(gridExtra)
library(grid)
# plot(cars)
qp <- qplot(mpg, wt, data=mtcars)
qp
print(qp + theme(plot.background = element_rect(fill="white")), vp=viewport(.8, .75, .3, .3))
?unit
library(ggplot2)
library(gridExtra)
library(grid)
# plot(cars)
qp <- qplot(mpg, wt, data=mtcars)
qp
print(qp + theme(plot.background = element_rect(fill="white")), vp=viewport(.8, .75, 1, 1))
library(ggplot2)
library(gridExtra)
library(grid)
# plot(cars)
qp <- qplot(mpg, wt, data=mtcars)
qp
print(qp + theme(plot.background = element_rect(fill="white")), vp=viewport(.8, .75, .5, .5))
library(ggplot2)
library(gridExtra)
library(grid)
# plot(cars)
qp <- qplot(mpg, wt, data=mtcars)
qp
print(qp + theme(plot.background = element_rect(fill="white")), vp=viewport(.8, .75, .2, .2))
library(ggplot2)
library(gridExtra)
library(grid)
# plot(cars)
qp <- qplot(mpg, wt, data=mtcars)
qp
print(qp + theme(plot.background = element_rect(fill="white")), vp=viewport(.8, .75, .3, .3))
?print.ggplot
library(ggplot2)
library(gridExtra)
library(grid)
# plot(cars)
qp <- qplot(mpg, wt, data=mtcars)
qp
print(qp + theme(plot.background = element_rect(fill="white")), vp=viewport(.8, .75, .3, 1))
plot(cars)
cars
dd = cars
dd2 = mtcars
View(dd2)
View(dd)
dd[1,1]
write.csv(dd2, "demo.csv", row.names = F)
library(tidyverse)
dd2 %>%
group_by(cyl) %>%
summarise(mean(hp))
dd2 %>%
group_by(cyl) %>%
summarise(avg.hp = mean(hp))
dd2 %>%
group_by(cyl) %>%
summarise(avg.hp = mean(hp), dist = mean(dist))
dd2 %>%
group_by(cyl) %>%
summarise(avg.hp = mean(hp), dist = mean(dist, na.rm=T))
names(dd2)
dd2 %>%
group_by(cyl) %>%
summarise(avg.hp = mean(hp), disp = mean(disp, na.rm=T))
setwd("C:/Users/yanjliu/Google Drive/DAE/Imagine SYD/Travel time carnival")
source("ggmap alt.R")
load("Greater SYD SA2 shp.RData")
# load("./Data from google/travel time output Wed tnf dnt p.RData")
load("./Data from google/travel time output Wed tnf.RData")
load("./Data from google/travel time output Wed tnf transit.RData")
#---------------------reverse geocoding----------------------------------------------------------------
# google <- data.frame(SYD$SA2_NAME16,as.data.frame(sp::getSpPPolygonsLabptSlots(SYD))) %>%
#   map_if(is.numeric, ~round(.x,4)) %>%
#   do.call(bind_cols,.)
#
# names(google) <- c("SA2", "long", "lat")
#
# address <- list()
# for (i in 1:nrow(google)) {
#   address[[as.character(i)]] <- paste0("http://maps.googleapis.com/maps/api/geocode/json?latlng=",
#                                        google$lat[i], ",",
#                                        google$long[i]) %>%
#     readLines() %>%
#     jsonlite::fromJSON() %>%
#     .[["results"]] %>%
#     .[["formatted_address"]] %>%
#     .[[1]]
# }
#
# google <- google %>%
#   mutate(address = do.call(c, address))
google <- read_csv("google.csv")
SA2.unmatched <- c("Budgewoi - Buff Point - Halekulani",
"The Entrance", "Holsworthy Military Area",
"Rosemeadow - Glen Alpine",
"Dural - Kenthurst - Wisemans Ferry",
"Manly Vale - Allambie Heights",
"Kingswood - Werrington")
google$address[google$SA2 %in% SA2.unmatched] <- SA2.unmatched %>% str_replace_all("\\-","")
#-------------------------Driving------------------------------------------------------------------------
#Sydney - Haymarket - The Rocks = 151.2081, -33.86834 = 171 Pitt St, Sydney NSW 2000, Australia
#Parramatta train station = 151.0048,-33.81723 = 21 Darcy St, Parramatta NSW 2150, Australia
#Parramatta city council = 151.0041 -33.81824 = 126 Church St, Parramatta NSW 2150
getDist <- function(time = "00:00",df=google, tm="pessimistic",
...) {
dlist <- list()
for (i in 1:nrow(df)) {
print(paste0(i,": ",df$SA2[i]))
output <- tryCatch(mapdist2(...,
from = df$address[i],
to = "171 Pitt St, Sydney NSW 2000, Australia",
dt = paste0("2017-9-6 ",time, ":00")), error = function(cond) return(NA))
if (is.data.frame(output)) dlist[[google$SA2[i]]] <-  output
else dlist[[google$SA2[i]]] <- NA
Sys.sleep(1)
}
bind_cols(df[1:nrow(df),], do.call(rbind, dlist))
}
# ptm <- proc.time()
output0000_Wed <- getDist(time = "00:00")
output0530_Wed <- getDist(time = "05:30")
output0830_Wed <- getDist(time = "08:30")
output1130_Wed <- getDist(time = "11:30")
output1430_Wed <- getDist(time = "14:30")
output1730_Wed <- getDist(time = "17:30")
output2030_Wed <- getDist(time = "20:30")
# proc.time() - ptm
getDist_f_cbd <- function(time = "00:00",df=google, tm="pessimistic",
...) {
dlist <- list()
for (i in 1:nrow(df)) {
print(paste0(i,": ",df$SA2[i]))
output <- tryCatch(mapdist2(...,
to = df$address[i],
from = "171 Pitt St, Sydney NSW 2000, Australia",
dt = paste0("2017-9-6 ",time, ":00")), error = function(cond) return(NA))
if (is.data.frame(output)) dlist[[google$SA2[i]]] <-  output
else dlist[[google$SA2[i]]] <- NA
Sys.sleep(1)
}
bind_cols(df[1:nrow(df),], do.call(rbind, dlist))
}
output0000_f_cbd_Wed <- getDist_f_cbd(time = "00:00")
output0530_f_cbd_Wed <- getDist_f_cbd(time = "05:30")
output0830_f_cbd_Wed <- getDist_f_cbd(time = "08:30")
output1130_f_cbd_Wed <- getDist_f_cbd(time = "11:30")
output1430_f_cbd_Wed <- getDist_f_cbd(time = "14:30")
output1730_f_cbd_Wed <- getDist_f_cbd(time = "17:30")
output2030_f_cbd_Wed <- getDist_f_cbd(time = "20:30")
#---------------------------------Transit-----------------------------------------------------------------
#Sydney - Haymarket - The Rocks = 151.2081, -33.86834 = 171 Pitt St, Sydney NSW 2000, Australia
#Parramatta train station = 151.0048,-33.81723 = 21 Darcy St, Parramatta NSW 2150, Australia
#Parramatta city council = 151.0041 -33.81824 = 126 Church St, Parramatta NSW 2150
getDist_transit <- function(time = "00:00",df=google, tm="pessimistic",
...) {
dlist <- list()
for (i in 1:nrow(df)) {
print(paste0(i,": ",df$SA2[i]))
output <- tryCatch(md_transit(...,
from = df$address[i],
to = "171 Pitt St, Sydney NSW 2000, Australia",
dt = paste0("2017-9-6 ",time, ":00")), error = function(cond) return(NA))
if (is.data.frame(output)) dlist[[google$SA2[i]]] <-  output
else dlist[[google$SA2[i]]] <- NA
Sys.sleep(1)
}
bind_cols(df[1:nrow(df),], do.call(rbind, dlist))
}
# ptm <- proc.time()
output0000_transit_Wed <- getDist_transit(time = "00:00")
output0530_transit_Wed <- getDist_transit(time = "05:30")
output0830_transit_Wed <- getDist_transit(time = "08:30")
output1130_transit_Wed <- getDist_transit(time = "11:30")
output1430_transit_Wed <- getDist_transit(time = "14:30")
output1730_transit_Wed <- getDist_transit(time = "17:30")
output2030_transit_Wed <- getDist_transit(time = "20:30")
# proc.time() - ptm
getDist_f_cbd_transit <- function(time = "00:00",df=google, tm="pessimistic",
...) {
dlist <- list()
for (i in 1:nrow(df)) {
print(paste0(i,": ",df$SA2[i]))
output <- tryCatch(md_transit(...,
to = df$address[i],
from = "171 Pitt St, Sydney NSW 2000, Australia",
dt = paste0("2017-9-6 ",time, ":00")), error = function(cond) return(NA))
if (is.data.frame(output)) dlist[[google$SA2[i]]] <-  output
else dlist[[google$SA2[i]]] <- NA
Sys.sleep(1)
}
bind_cols(df[1:nrow(df),], do.call(rbind, dlist))
}
output0000_f_cbd_transit_Wed <- getDist_f_cbd_transit(time = "00:00")
output0530_f_cbd_transit_Wed <- getDist_f_cbd_transit(time = "05:30")
output0830_f_cbd_transit_Wed <- getDist_f_cbd_transit(time = "08:30")
output1130_f_cbd_transit_Wed <- getDist_f_cbd_transit(time = "11:30")
output1430_f_cbd_transit_Wed <- getDist_f_cbd_transit(time = "14:30")
output1730_f_cbd_transit_Wed <- getDist_f_cbd_transit(time = "17:30")
output2030_f_cbd_transit_Wed <- getDist_f_cbd_transit(time = "20:30")
save.image("C:/Users/yanjliu/Google Drive/DAE/Imagine SYD/Travel time carnival/Data from google/travel time output Wed tnf dnt p with toll before cleaning.RData")
SYD_tidy <- broom::tidy(SYD)
add_id <- function(df) {
df_name <- deparse(substitute(df))
# browse()
df %>%
select(SA2, long, lat, address, from, to, dt, km, minutes_tf) %>%
mutate(tt = str_extract(df_name, "(?<=output)[0-9]{4}")) %>%
mutate(time = paste0(str_sub(tt,1,2),":",str_sub(tt,3,4))) %>%
select(-tt) %>%
mutate(direction = ifelse(str_detect(df_name,"f_cbd"), "From CBD", "To CBD")) %>%
mutate(mode = ifelse(str_detect(df_name,"transit"), "Transit", "Driving")) %>%
mutate(weekday = str_sub(df_name, nchar(df_name)-2,nchar(df_name))) %>%
mutate(id = unique(SYD_tidy$id)) %>%
mutate(fvar = cut(minutes_tf, c(0,30,60,90,Inf),include.lowest = T)) %>%
mutate(fvar = fct_recode(fvar,
"< 30 min" = "[0,30]",
"30 - 60 min" = "(30,60]",
"60 - 90 min" = "(60,90]",
"> 90 min" = "(90,Inf]"))
}
data1 <- paste("add_id(",
ls()[str_detect(ls(),"output")],
")",
collapse=",") %>%
paste0("bind_rows(", ., ")") %>%
parse(text=.) %>%
eval()
8736/312
na_data <- data1 %>% filter(is.na(minutes_tf)) %>% mutate(type = paste0(mode, " ", direction))
View(na_data)
na_data <- data1 %>% filter(is.na(minutes_tf), time!="00:00") %>% mutate(type = paste0(mode, " ", direction))
View(na_data)
na_data <- data1 %>% filter(is.na(minutes_tf)) %>% mutate(type = paste0(mode, " ", direction))
fixed_na_data <- list()
for (i in 1:nrow(na_data)) {
fixed_na_data[[i]] <- switch(na_data$type[i],
"Driving To CBD" = tryCatch(getDist(na_data$time[i], df = na_data[i,1:4]),
error = function(cond) return(tryCatch(getDist(na_data$time[i],
df = na_data[i,1:4] %>%
mutate(address = SA2)),
error = function(cond) return(NA)))),
"Driving From CBD" = tryCatch(getDist_f_cbd(na_data$time[i], df = na_data[i,1:4]),
error = function(cond) return(tryCatch(getDist_f_cbd(na_data$time[i],
df = na_data[i,1:4] %>%
mutate(address = SA2)),
error = function(cond) return(NA)))),
"Transit To CBD" = tryCatch(getDist_transit(na_data$time[i], df = na_data[i,1:4]),
error = function(cond) return(tryCatch(getDist_transit(na_data$time[i],
df = na_data[i,1:4] %>%
mutate(address = SA2)),
error = function(cond) return(NA)))),
"Transit From CBD" = tryCatch(getDist_f_cbd_transit(na_data$time[i], df = na_data[i,1:4]),
error = function(cond) return(tryCatch(getDist_f_cbd_transit(na_data$time[i],
df = na_data[i,1:4] %>%
mutate(address = SA2)),
error = function(cond) return(NA))))
)
}
data1 %>% filter(is.na(minutes_tf))
fixed_na_data_dt <- do.call(rbind, fixed_na_data) %>%
mutate(fvar = cut(minutes_tf, c(0,30,60,90,Inf),include.lowest = T)) %>%
mutate(fvar = fct_recode(fvar,
"< 30 min" = "[0,30]",
"30 - 60 min" = "(30,60]",
"60 - 90 min" = "(60,90]",
"> 90 min" = "(90,Inf]"))
fixed_na_data_dt
do.call(rbind, fixed_na_data)
do.call(bind_row, fixed_na_data)
do.call(bind_rows, fixed_na_data)
fixed_na_data
do.call(rbind, fixed_na_data)
fixed_na_data[[1]]
fixed_na_data[1:10]
do.call(bind_rows, fixed_na_data)
fixed_na_data[1:500]
fixed_na_data[1:50]
?plyr::rbind.fill
fixed_na_data_dt <- do.call(plyr::rbind.fill, fixed_na_data) %>%
mutate(fvar = cut(minutes_tf, c(0,30,60,90,Inf),include.lowest = T)) %>%
mutate(fvar = fct_recode(fvar,
"< 30 min" = "[0,30]",
"30 - 60 min" = "(30,60]",
"60 - 90 min" = "(60,90]",
"> 90 min" = "(90,Inf]"))
map_chr(fixed_na_data,class)
fixed_na_data[[5]]
fixed_na_data[[1:5]]
fixed_na_data[1:5]
map(fixed_na_data,class)
combine(fixed_na_data)
?combine
do.call(bind_rows, fixed_na_data)
install.packages(c("bayesplot", "ggbeeswarm", "magick", "pander", "reshape", "satellite", "sjmisc", "spbabel"))
do.call(bind_rows, fixed_na_data)
do.call(bind_rows, fixed_na_data[1:5])
do.call(bind_rows, fixed_na_data[1:2])
do.call(bind_rows, list(NA, NA))
data.table::rbindlist(fixed_na_data)
rbind(mtcars, NA)
rbind(NA,mtcars)
do.call(rbind, fixed_na_data)
do.call(rbind, fixed_na_data[1:5])
names(fixed_na_data[[1]])
dim(fixed_na_data[[1]])
names(fixed_na_data[[5]])
names(fixed_na_data[[16]])
for (i in 1:length(fixed_na_data)) {
if (is.data.frame(fixed_na_data[[i]])) fixed_na_data[[i]] <- fixed_na_data[[i]] %>%
select(SA2, long, lat, address, from, to, dt, km, minutes_tf)
}
fixed_na_data_dt <- do.call(rbind, fixed_na_data) %>%
mutate(fvar = cut(minutes_tf, c(0,30,60,90,Inf),include.lowest = T)) %>%
mutate(fvar = fct_recode(fvar,
"< 30 min" = "[0,30]",
"30 - 60 min" = "(30,60]",
"60 - 90 min" = "(60,90]",
"> 90 min" = "(90,Inf]"))
data1$km[is.na(data1$minutes_tf)] <- fixed_na_data_dt$km
data1$fvar[is.na(data1$minutes_tf)] <- fixed_na_data_dt$fvar
data1$minutes_tf[is.na(data1$minutes_tf)] <- fixed_na_data_dt$minutes_tf
write.csv(data1, "./Data from google/travel time output Wed cleaned full with toll.csv", row.names = FALSE)
data1 %>% filter(str_detect(SA2, "Castle Hill")) %>% spread(mode, minutes_tf) %>% View
md_transit("Castle Hill, NSW", "Sydney", dt = "2017-9-6 17:30")
md_transit("Castle Hill, NSW", "Sydney, NSW", dt = "2017-9-6 17:30:00")
md_transit("Sydney, NSW","Castle Hill, NSW", dt = "2017-9-6 17:30:00")
md_transit("Sydney, NSW","Castle Hill, NSW", dt = "2017-9-6 08:30:00")
md_transit("Castle Hill, NSW","Sydney, NSW", dt = "2017-9-6 08:30:00")
data1 %>% filter(str_detect(SA2, "Castle Hill"), direction == "To CBD", time == "08:30") %>% select(SA2, minutes_tf, mode) %>% spread(mode, minutes_tf) %>% View
data1 %>% filter(str_detect(SA2, "Castle Hill"), direction == "To CBD", time == "08:30") %>% select(SA2, address, minutes_tf, mode) %>% spread(mode, minutes_tf) %>% View
mapdist("8 White Cedar Dr, Castle Hill NSW 2154, Australia", "171 Pitt St, Sydney NSW 2000, Australia", dt = "2017-9-6 08:30:00")
mapdist2("8 White Cedar Dr, Castle Hill NSW 2154, Australia", "171 Pitt St, Sydney NSW 2000, Australia", dt = "2017-9-6 08:30:00")
readLines("https://maps.googleapis.com/maps/api/distancematrix/json?origins=8+White+Cedar+Dr+Castle+Hill+NSW+2154+Australia&destinations=171+Pitt+St+Sydney+NSW+2000+Australia&mode=driving&sensor=false&departure_time=1504650600&key=AIzaSyDi49mP4kzhm9q7NFllgVdJ4U8ah3pTKQs&avoid=tolls&traffic_model=pessimistic")
readLines("https://maps.googleapis.com/maps/api/distancematrix/json?origins=8+White+Cedar+Dr+Castle+Hill+NSW+2154+Australia&destinations=171+Pitt+St+Sydney+NSW+2000+Australia&mode=driving&sensor=false&departure_time=1504650600&key=AIzaSyDi49mP4kzhm9q7NFllgVdJ4U8ah3pTKQs")
readLines("https://maps.googleapis.com/maps/api/distancematrix/json?origins=8+White+Cedar+Dr+Castle+Hill+NSW+2154+Australia&destinations=171+Pitt+St+Sydney+NSW+2000+Australia&mode=driving&sensor=false&departure_time=1504650600&key=AIzaSyDi49mP4kzhm9q7NFllgVdJ4U8ah3pTKQs&traffic_model=pessimistic")
readLines("https://maps.googleapis.com/maps/api/distancematrix/json?origins=8+White+Cedar+Dr+Castle+Hill+NSW+2154+Australia&destinations=171+Pitt+St+Sydney+NSW+2000+Australia&mode=driving&sensor=false&departure_time=1504650600&key=AIzaSyDi49mP4kzhm9q7NFllgVdJ4U8ah3pTKQs")
readLines("https://maps.googleapis.com/maps/api/distancematrix/json?origins=8+White+Cedar+Dr+Castle+Hill+NSW+2154+Australia&destinations=171+Pitt+St+Sydney+NSW+2000+Australia&mode=driving&sensor=false&departure_time=1504650600&key=AIzaSyDi49mP4kzhm9q7NFllgVdJ4U8ah3pTKQs&traffic_model=best_guess")
readLines("https://maps.googleapis.com/maps/api/distancematrix/json?origins=8+White+Cedar+Dr+Castle+Hill+NSW+2154+Australia&destinations=171+Pitt+St+Sydney+NSW+2000+Australia&mode=driving&sensor=false&departure_time=1504650600&key=AIzaSyDi49mP4kzhm9q7NFllgVdJ4U8ah3pTKQs&traffic_model=pessimistic")
readLines("https://maps.googleapis.com/maps/api/distancematrix/json?origins=8+White+Cedar+Dr+Castle+Hill+NSW+2154+Australia&destinations=171+Pitt+St+Sydney+NSW+2000+Australia&mode=driving&sensor=false&departure_time=1504650600&key=AIzaSyDi49mP4kzhm9q7NFllgVdJ4U8ah3pTKQs&avoid=tolls&traffic_model=pessimistic")
readLines("https://maps.googleapis.com/maps/api/distancematrix/json?origins=8+White+Cedar+Dr+Castle+Hill+NSW+2154+Australia&destinations=171+Pitt+St+Sydney+NSW+2000+Australia&mode=transit&sensor=false&departure_time=1504650600&key=AIzaSyDi49mP4kzhm9q7NFllgVdJ4U8ah3pTKQs&avoid=tolls&traffic_model=pessimistic")
readLines("https://maps.googleapis.com/maps/api/distancematrix/json?origins=8+White+Cedar+Dr+Castle+Hill+NSW+2154+Australia&destinations=171+Pitt+St+Sydney+NSW+2000+Australia&mode=transit&sensor=false&departure_time=1504650600&key=AIzaSyDi49mP4kzhm9q7NFllgVdJ4U8ah3pTKQs&avoid=tolls")
readLines("https://maps.googleapis.com/maps/api/distancematrix/json?origins=8+White+Cedar+Dr+Castle+Hill+NSW+2154+Australia&destinations=171+Pitt+St+Sydney+NSW+2000+Australia&mode=transit&sensor=false&departure_time=1504650600&key=AIzaSyDi49mP4kzhm9q7NFllgVdJ4U8ah3pTKQs")
readLines("https://maps.googleapis.com/maps/api/distancematrix/json?origins=8+White+Cedar+Dr+Castle+Hill+NSW+2154+Australia&destinations=171+Pitt+St+Sydney+NSW+2000+Australia&mode=driving&sensor=false&departure_time=1504650600&key=AIzaSyDi49mP4kzhm9q7NFllgVdJ4U8ah3pTKQs&avoid=tolls&traffic_model=pessimistic")
readLines("https://maps.googleapis.com/maps/api/distancematrix/json?origins=8+White+Cedar+Dr+Castle+Hill+NSW+2154+Australia&destinations=171+Pitt+St+Sydney+NSW+2000+Australia&mode=driving&sensor=false&departure_time=1504650600&key=AIzaSyDi49mP4kzhm9q7NFllgVdJ4U8ah3pTKQs&avoid=tolls&traffic_model=best_guess")
readLines("https://maps.googleapis.com/maps/api/distancematrix/json?origins=8+White+Cedar+Dr+Castle+Hill+NSW+2154+Australia&destinations=171+Pitt+St+Sydney+NSW+2000+Australia&mode=driving&sensor=false&departure_time=1504650600&key=AIzaSyDi49mP4kzhm9q7NFllgVdJ4U8ah3pTKQs&traffic_model=pessimistic")
setwd("C:/Users/yanjliu/Google Drive/DAE/Imagine SYD/Travel time carnival")
source("ggmap alt.R")
load("Greater SYD SA2 shp.RData")
google <- read_csv("google.csv")
SA2.unmatched <- c("Budgewoi - Buff Point - Halekulani",
"The Entrance", "Holsworthy Military Area",
"Rosemeadow - Glen Alpine",
"Dural - Kenthurst - Wisemans Ferry",
"Manly Vale - Allambie Heights",
"Kingswood - Werrington")
google$address[google$SA2 %in% SA2.unmatched] <- SA2.unmatched %>% str_replace_all("\\-","")
getDist <- function(time = "00:00",df=google, tm="pessimistic",
...) {
dlist <- list()
for (i in 1:nrow(df)) {
print(paste0(i,": ",df$SA2[i]))
output <- tryCatch(mapdist2(...,
from = df$address[i],
to = "171 Pitt St, Sydney NSW 2000, Australia",
dt = paste0("2017-9-6 ",time, ":00")), error = function(cond) return(NA))
if (is.data.frame(output)) dlist[[google$SA2[i]]] <-  output
else dlist[[google$SA2[i]]] <- NA
Sys.sleep(1)
}
bind_cols(df[1:nrow(df),], do.call(rbind, dlist))
}
mapdist2("8 White Cedar Dr, Castle Hill NSW 2154, Australia", "171 Pitt St, Sydney NSW 2000, Australia", dt = "2017-9-6 08:30:00")
md_transit("8 White Cedar Dr, Castle Hill NSW 2154, Australia", "171 Pitt St, Sydney NSW 2000, Australia", dt = "2017-9-6 08:30:00")
setwd("C:/Users/yanjliu/Google Drive/DAE/Imagine SYD/Travel time carnival")
source("ggmap alt.R")
load("Greater SYD SA2 shp.RData")
google <- read_csv("google.csv")
SA2.unmatched <- c("Budgewoi - Buff Point - Halekulani",
"The Entrance", "Holsworthy Military Area",
"Rosemeadow - Glen Alpine",
"Dural - Kenthurst - Wisemans Ferry",
"Manly Vale - Allambie Heights",
"Kingswood - Werrington")
google$address[google$SA2 %in% SA2.unmatched] <- SA2.unmatched %>% str_replace_all("\\-","")
getDist <- function(time = "00:00",df=google, tm="pessimistic",
...) {
dlist <- list()
for (i in 1:nrow(df)) {
print(paste0(i,": ",df$SA2[i]))
output <- tryCatch(mapdist2(...,
from = df$address[i],
to = "171 Pitt St, Sydney NSW 2000, Australia",
dt = paste0("2017-9-6 ",time, ":00")), error = function(cond) return(NA))
if (is.data.frame(output)) dlist[[google$SA2[i]]] <-  output
else dlist[[google$SA2[i]]] <- NA
Sys.sleep(1)
}
bind_cols(df[1:nrow(df),], do.call(rbind, dlist))
}
# ptm <- proc.time()
output0000_Wed <- getDist(time = "00:00")
output0530_Wed <- getDist(time = "05:30")
output0830_Wed <- getDist(time = "08:30")
output1130_Wed <- getDist(time = "11:30")
output1430_Wed <- getDist(time = "14:30")
output1730_Wed <- getDist(time = "17:30")
output2030_Wed <- getDist(time = "20:30")
# proc.time() - ptm
getDist_f_cbd <- function(time = "00:00",df=google, tm="pessimistic",
...) {
dlist <- list()
for (i in 1:nrow(df)) {
print(paste0(i,": ",df$SA2[i]))
output <- tryCatch(mapdist2(...,
to = df$address[i],
from = "171 Pitt St, Sydney NSW 2000, Australia",
dt = paste0("2017-9-6 ",time, ":00")), error = function(cond) return(NA))
if (is.data.frame(output)) dlist[[google$SA2[i]]] <-  output
else dlist[[google$SA2[i]]] <- NA
Sys.sleep(1)
}
bind_cols(df[1:nrow(df),], do.call(rbind, dlist))
}
output0000_f_cbd_Wed <- getDist_f_cbd(time = "00:00")
output0530_f_cbd_Wed <- getDist_f_cbd(time = "05:30")
output0830_f_cbd_Wed <- getDist_f_cbd(time = "08:30")
output1130_f_cbd_Wed <- getDist_f_cbd(time = "11:30")
output1430_f_cbd_Wed <- getDist_f_cbd(time = "14:30")
output1730_f_cbd_Wed <- getDist_f_cbd(time = "17:30")
output2030_f_cbd_Wed <- getDist_f_cbd(time = "20:30")
save.image("C:/Users/yanjliu/Google Drive/DAE/Imagine SYD/Travel time carnival/Data from google/travel time output Wed tnf driving p with toll before cleaning.RData")
SYD_tidy <- broom::tidy(SYD)
add_id <- function(df) {
df_name <- deparse(substitute(df))
# browse()
df %>%
select(SA2, long, lat, address, from, to, dt, km, minutes_tf) %>%
mutate(tt = str_extract(df_name, "(?<=output)[0-9]{4}")) %>%
mutate(time = paste0(str_sub(tt,1,2),":",str_sub(tt,3,4))) %>%
select(-tt) %>%
mutate(direction = ifelse(str_detect(df_name,"f_cbd"), "From CBD", "To CBD")) %>%
mutate(mode = ifelse(str_detect(df_name,"transit"), "Transit", "Driving")) %>%
mutate(weekday = str_sub(df_name, nchar(df_name)-2,nchar(df_name))) %>%
mutate(id = unique(SYD_tidy$id)) %>%
mutate(fvar = cut(minutes_tf, c(0,30,60,90,Inf),include.lowest = T)) %>%
mutate(fvar = fct_recode(fvar,
"< 30 min" = "[0,30]",
"30 - 60 min" = "(30,60]",
"60 - 90 min" = "(60,90]",
"> 90 min" = "(90,Inf]"))
}
data1 <- paste("add_id(",
ls()[str_detect(ls(),"output")],
")",
collapse=",") %>%
paste0("bind_rows(", ., ")") %>%
parse(text=.) %>%
eval()
rm(list = ls()[str_detect(ls(),"output")])
count(data1, time, direction)
filter(data1, is.na(minutes_tf))
write.csv(data1, "./Data from google/travel time output Wed driving with toll full.csv", row.names = FALSE)
setwd("C:/Users/yanjliu/Google Drive/DAE/Imagine SYD/Travel time carnival/GIS files/Trains")
ff <- read_csv("Ferries.csv")
View(ff)
f_loc <- geocode(paste0(ff$Name," Ferry Terminal NSW"))
write.csv(bind_cols(ff, f_loc), "Ferries.csv", row.names = F)
lr <- read_csv("LightRails.csv")
lr <- read_csv("LightRails.csv")
View(ff)
View(lr)
lr <- read_csv("LightRails.csv")
lr_loc <- geocode(paste0(lr$Name, " light rail station NSW"))
write.csv(bind_cols(lr, lr_loc), row.names = F)
write.csv(bind_cols(lr, lr_loc), "LightRails.csv",row.names = F)
